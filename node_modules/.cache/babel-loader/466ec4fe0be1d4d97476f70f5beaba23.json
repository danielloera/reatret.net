{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _eventemitter = require('eventemitter3');\n\nvar _eventemitter2 = _interopRequireDefault(_eventemitter);\n\nvar _slaveCodeUri = require('./slave-code-uri');\n\nvar _slaveCodeUri2 = _interopRequireDefault(_slaveCodeUri);\n\nvar _config = require('../config');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nif (_typeof(window.Worker) !== 'object' && typeof window.Worker !== 'function') {\n  throw new Error('Browser does not support web workers!');\n}\n\nfunction joinPaths(path1, path2) {\n  if (!path1 || !path2) {\n    return path1 + path2;\n  } else if (path1.charAt(path1.length - 1) === '/' || path2.charAt(0) === '/') {\n    return path1 + path2;\n  } else {\n    return path1 + '/' + path2;\n  }\n}\n\nfunction prependScriptUrl(scriptUrl) {\n  var prefix = (0, _config.getConfig)().basepath.web;\n  return prefix ? joinPaths(prefix, scriptUrl) : scriptUrl;\n}\n\nfunction argsToArray(argumentsList) {\n  return Array.prototype.slice.call(argumentsList);\n}\n\nfunction logError(error) {\n  if (error.stack) {\n    console.error(error.stack); // eslint-disable-line no-console\n  } else if (error.message && error.filename && error.lineno) {\n    var fileName = error.filename.match(/^data:text\\/javascript/) && error.filename.length > 50 ? error.filename.substr(0, 50) + '...' : error.filename;\n    console.error(error.message + ' @' + fileName + ':' + error.lineno); // eslint-disable-line no-console\n  } else {\n    console.error(error); // eslint-disable-line no-console\n  }\n}\n\nvar Worker = function (_EventEmitter) {\n  _inherits(Worker, _EventEmitter);\n\n  function Worker() {\n    var initialScript = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var importScripts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _classCallCheck(this, Worker); // used by `run()` to decide if the worker must be re-initialized\n\n\n    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));\n\n    _this.currentRunnable = null;\n    _this.currentImportScripts = [];\n\n    _this.initWorker();\n\n    _this.worker.addEventListener('message', _this.handleMessage.bind(_this));\n\n    _this.worker.addEventListener('error', _this.handleError.bind(_this));\n\n    if (initialScript) {\n      _this.run(initialScript, importScripts);\n    }\n\n    return _this;\n  }\n\n  Worker.prototype.initWorker = function initWorker() {\n    try {\n      this.worker = new window.Worker(_slaveCodeUri2.default);\n    } catch (error) {\n      var slaveScriptUrl = (0, _config.getConfig)().fallback.slaveScriptUrl;\n\n      if (slaveScriptUrl) {\n        // try using the slave script file instead of the data URI\n        this.worker = new window.Worker(slaveScriptUrl);\n      } else {\n        // re-throw\n        throw error;\n      }\n    }\n  };\n\n  Worker.prototype.run = function run(toRun) {\n    var importScripts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    if (this.alreadyInitializedToRun(toRun, importScripts)) {\n      // don't re-initialize with the new logic if it already has been\n      return this;\n    }\n\n    if (typeof toRun === 'function') {\n      this.runMethod(toRun, importScripts);\n    } else {\n      this.runScripts(toRun, importScripts);\n    }\n\n    this.currentRunnable = toRun;\n    this.currentImportScripts = importScripts;\n    return this;\n  };\n\n  Worker.prototype.runMethod = function runMethod(method, importScripts) {\n    var methodStr = method.toString();\n    var args = methodStr.substring(methodStr.indexOf('(') + 1, methodStr.indexOf(')')).split(',');\n    var body = methodStr.substring(methodStr.indexOf('{') + 1, methodStr.lastIndexOf('}'));\n    this.worker.postMessage({\n      initByMethod: true,\n      method: {\n        args: args,\n        body: body\n      },\n      scripts: importScripts.map(prependScriptUrl)\n    });\n  };\n\n  Worker.prototype.runScripts = function runScripts(script, importScripts) {\n    if (!script) {\n      throw new Error('Must pass a function or a script URL to run().');\n    } // attention: array for browser, single script for node\n\n\n    this.worker.postMessage({\n      initByScripts: true,\n      scripts: importScripts.concat([script]).map(prependScriptUrl)\n    });\n  };\n\n  Worker.prototype.send = function send(param) {\n    var transferables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    this.worker.postMessage({\n      doRun: true,\n      param: param\n    }, transferables);\n    return this;\n  };\n\n  Worker.prototype.kill = function kill() {\n    this.worker.terminate();\n    this.emit('exit');\n    return this;\n  };\n\n  Worker.prototype.promise = function promise() {\n    var _this2 = this;\n\n    return new Promise(function (resolve, reject) {\n      var resolved = void 0,\n          rejected = void 0;\n\n      resolved = function resolved(result) {\n        _this2.removeListener('error', rejected);\n\n        resolve(result);\n      };\n\n      rejected = function rejected(err) {\n        _this2.removeListener('message', resolved);\n\n        reject(err);\n      };\n\n      _this2.once('message', resolved).once('error', rejected);\n    });\n  };\n\n  Worker.prototype.alreadyInitializedToRun = function alreadyInitializedToRun(toRun, importScripts) {\n    var runnablesMatch = this.currentRunnable === toRun;\n    var importScriptsMatch = this.currentImportScripts === importScripts || importScripts.length === 0 && this.currentImportScripts.length === 0;\n    return runnablesMatch && importScriptsMatch;\n  };\n\n  Worker.prototype.handleMessage = function handleMessage(event) {\n    if (event.data.error) {\n      this.handleError(event.data.error);\n    } else if (event.data.progress) {\n      this.handleProgress(event.data.progress);\n    } else {\n      var responseArgs = argsToArray(event.data.response);\n      this.emit.apply(this, ['message'].concat(responseArgs));\n      this.emit.apply(this, ['done'].concat(responseArgs)); // this one is just for convenience\n    }\n  };\n\n  Worker.prototype.handleProgress = function handleProgress(progress) {\n    this.emit('progress', progress);\n  };\n\n  Worker.prototype.handleError = function handleError(error) {\n    if (!this.listeners('error', true)) {\n      logError(error);\n    }\n\n    if (error.preventDefault) {\n      error.preventDefault();\n    }\n\n    this.emit('error', error);\n  };\n\n  return Worker;\n}(_eventemitter2.default);\n\nexports.default = Worker;","map":{"version":3,"sources":["worker.browser/worker.js"],"names":["window","path1","path2","prefix","joinPaths","Array","error","console","fileName","Worker","initialScript","importScripts","initWorker","slaveScriptUrl","run","toRun","runMethod","method","methodStr","args","body","initByMethod","scripts","runScripts","script","initByScripts","send","param","transferables","doRun","kill","promise","resolved","rejected","resolve","reject","alreadyInitializedToRun","runnablesMatch","importScriptsMatch","handleMessage","event","responseArgs","argsToArray","handleProgress","progress","handleError","logError"],"mappings":"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","sourcesContent":["import EventEmitter from 'eventemitter3';\nimport slaveCodeDataUri from './slave-code-uri';\n\nimport { getConfig } from '../config';\n\nif (typeof window.Worker !== 'object' && typeof window.Worker !== 'function') {\n  throw new Error('Browser does not support web workers!');\n}\n\nfunction joinPaths (path1, path2) {\n  if (!path1 || !path2) {\n    return path1 + path2;\n  } else if (path1.charAt(path1.length - 1) === '/' || path2.charAt(0) === '/') {\n    return path1 + path2;\n  } else {\n    return path1 + '/' + path2;\n  }\n}\n\nfunction prependScriptUrl(scriptUrl) {\n  const prefix = getConfig().basepath.web;\n  return prefix ? joinPaths(prefix, scriptUrl) : scriptUrl;\n}\n\nfunction argsToArray(argumentsList) {\n  return Array.prototype.slice.call(argumentsList);\n}\n\nfunction logError(error) {\n  if (error.stack) {\n    console.error(error.stack);                                             // eslint-disable-line no-console\n  } else if (error.message && error.filename && error.lineno) {\n    const fileName = error.filename.match(/^data:text\\/javascript/) && error.filename.length > 50\n                   ? error.filename.substr(0, 50) + '...'\n                   : error.filename;\n    console.error(`${error.message} @${fileName}:${error.lineno}`);   // eslint-disable-line no-console\n  } else {\n    console.error(error);                                                   // eslint-disable-line no-console\n  }\n}\n\n\nexport default class Worker extends EventEmitter {\n  constructor(initialScript = null, importScripts = []) {\n    super();\n\n    // used by `run()` to decide if the worker must be re-initialized\n    this.currentRunnable = null;\n    this.currentImportScripts = [];\n\n    this.initWorker();\n    this.worker.addEventListener('message', this.handleMessage.bind(this));\n    this.worker.addEventListener('error', this.handleError.bind(this));\n\n    if (initialScript) {\n      this.run(initialScript, importScripts);\n    }\n  }\n\n  initWorker() {\n    try {\n      this.worker = new window.Worker(slaveCodeDataUri);\n    } catch (error) {\n      const slaveScriptUrl = getConfig().fallback.slaveScriptUrl;\n      if (slaveScriptUrl) {\n        // try using the slave script file instead of the data URI\n        this.worker = new window.Worker(slaveScriptUrl);\n      } else {\n        // re-throw\n        throw error;\n      }\n    }\n  }\n\n  run(toRun, importScripts = []) {\n    if (this.alreadyInitializedToRun(toRun, importScripts)) {\n      // don't re-initialize with the new logic if it already has been\n      return this;\n    }\n\n    if (typeof toRun === 'function') {\n      this.runMethod(toRun, importScripts);\n    } else {\n      this.runScripts(toRun, importScripts);\n    }\n\n    this.currentRunnable = toRun;\n    this.currentImportScripts = importScripts;\n\n    return this;\n  }\n\n  runMethod(method, importScripts) {\n    const methodStr = method.toString();\n    const args = methodStr.substring(methodStr.indexOf('(') + 1, methodStr.indexOf(')')).split(',');\n    const body = methodStr.substring(methodStr.indexOf('{') + 1, methodStr.lastIndexOf('}'));\n\n    this.worker.postMessage({\n      initByMethod : true,\n      method       : { args, body },\n      scripts      : importScripts.map(prependScriptUrl)\n    });\n  }\n\n  runScripts(script, importScripts) {\n    if (!script) { throw new Error('Must pass a function or a script URL to run().'); }\n\n    // attention: array for browser, single script for node\n    this.worker.postMessage({\n      initByScripts : true,\n      scripts       : importScripts.concat([ script ]).map(prependScriptUrl)\n    });\n  }\n\n  send(param, transferables = []) {\n    this.worker.postMessage({\n      doRun : true,\n      param\n    }, transferables);\n    return this;\n  }\n\n  kill() {\n    this.worker.terminate();\n    this.emit('exit');\n    return this;\n  }\n\n  promise() {\n    return new Promise((resolve, reject) => {\n      let resolved, rejected;\n      resolved = (result) => {\n        this.removeListener('error', rejected);\n        resolve(result);\n      };\n      rejected = (err) => {\n        this.removeListener('message', resolved);\n        reject(err);\n      };\n\n      this\n        .once('message', resolved)\n        .once('error', rejected);\n    });\n  }\n\n  alreadyInitializedToRun(toRun, importScripts) {\n    const runnablesMatch = this.currentRunnable === toRun;\n    const importScriptsMatch = this.currentImportScripts === importScripts\n      || (importScripts.length === 0 && this.currentImportScripts.length === 0);\n\n    return runnablesMatch && importScriptsMatch;\n  }\n\n  handleMessage(event) {\n    if (event.data.error) {\n      this.handleError(event.data.error);\n    } else if (event.data.progress) {\n      this.handleProgress(event.data.progress);\n    } else {\n      const responseArgs = argsToArray(event.data.response);\n      this.emit('message', ...responseArgs);\n      this.emit('done', ...responseArgs);    // this one is just for convenience\n    }\n  }\n\n  handleProgress(progress) {\n    this.emit('progress', progress);\n  }\n\n  handleError(error) {\n    if (!this.listeners('error', true)) {\n      logError(error);\n    }\n\n    if (error.preventDefault) {\n      error.preventDefault();\n    }\n\n    this.emit('error', error);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}