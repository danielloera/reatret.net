{"ast":null,"code":"import Konva from 'konva/lib/Core';\nimport { applyNodeProps, updatePicture, EVENTS_NAMESPACE } from './makeUpdates';\nimport invariant from './invariant';\nexport { unstable_now as now, unstable_IdlePriority as idlePriority, unstable_runWithPriority as run } from 'scheduler';\nvar NO_CONTEXT = {};\nvar UPDATE_SIGNAL = {}; // for react-spring capability\n\nKonva.Node.prototype._applyProps = applyNodeProps;\nexport function appendInitialChild(parentInstance, child) {\n  if (typeof child === 'string') {\n    // Noop for string children of Text (eg <Text>foo</Text>)\n    invariant(false, 'Do not use plain text as child of Konva.Node. You are using text: \"%s\"', child);\n    return;\n  }\n\n  parentInstance.add(child);\n  updatePicture(parentInstance);\n}\nexport function createInstance(type, props, internalInstanceHandle) {\n  var NodeClass = Konva[type];\n\n  if (!NodeClass) {\n    invariant(instance, 'Konva has no node with the type \"%s\". If you use minimal version of react-konva, just import required nodes into Konva: `import \"konva/lib/shapes/%s\"`  If you want to render DOM elements as part of canvas tree take a look into this demo: https://konvajs.github.io/docs/react/DOM_Portal.html', type, type);\n    return;\n  } // we need to split props into events and non events\n  // we we can pass non events into constructor directly\n  // that way the performance should be better\n  // we we apply change \"applyNodeProps\"\n  // then it will trigger change events on first run\n  // but we don't need them!\n\n\n  var propsWithoutEvents = {};\n  var propsWithOnlyEvents = {};\n\n  for (var key in props) {\n    var isEvent = key.slice(0, 2) === 'on';\n\n    if (isEvent) {\n      propsWithOnlyEvents[key] = props[key];\n    } else {\n      propsWithoutEvents[key] = props[key];\n    }\n  }\n\n  var instance = new NodeClass(propsWithoutEvents);\n  applyNodeProps(instance, propsWithOnlyEvents);\n  return instance;\n}\nexport function createTextInstance(text, rootContainerInstance, internalInstanceHandle) {\n  invariant(false, 'Text components are not supported for now in ReactKonva. Your text is: \"' + text + '\"');\n}\nexport function finalizeInitialChildren(domElement, type, props) {\n  return false;\n}\nexport function getPublicInstance(instance) {\n  return instance;\n}\nexport function prepareForCommit() {\n  return null;\n}\nexport function preparePortalMount() {\n  return null;\n}\nexport function prepareUpdate(domElement, type, oldProps, newProps) {\n  return UPDATE_SIGNAL;\n}\nexport function resetAfterCommit() {// Noop\n}\nexport function resetTextContent(domElement) {// Noop\n}\nexport function shouldDeprioritizeSubtree(type, props) {\n  return false;\n}\nexport function getRootHostContext() {\n  return NO_CONTEXT;\n}\nexport function getChildHostContext() {\n  return NO_CONTEXT;\n}\nexport var scheduleTimeout = setTimeout;\nexport var cancelTimeout = clearTimeout;\nexport var noTimeout = -1; // export const schedulePassiveEffects = scheduleDeferredCallback;\n// export const cancelPassiveEffects = cancelDeferredCallback;\n\nexport function shouldSetTextContent(type, props) {\n  return false;\n} // The Konva renderer is secondary to the React DOM renderer.\n\nexport var isPrimaryRenderer = false;\nexport var warnsIfNotActing = true;\nexport var supportsMutation = true;\nexport function appendChild(parentInstance, child) {\n  if (child.parent === parentInstance) {\n    child.moveToTop();\n  } else {\n    parentInstance.add(child);\n  }\n\n  updatePicture(parentInstance);\n}\nexport function appendChildToContainer(parentInstance, child) {\n  if (child.parent === parentInstance) {\n    child.moveToTop();\n  } else {\n    parentInstance.add(child);\n  }\n\n  updatePicture(parentInstance);\n}\nexport function insertBefore(parentInstance, child, beforeChild) {\n  invariant(child !== beforeChild, 'ReactKonva: Can not insert node before itself'); // child._remove() will not stop dragging\n  // but child.remove() will stop it, but we don't need it\n  // removing will reset zIndexes\n\n  child._remove();\n\n  parentInstance.add(child);\n  child.setZIndex(beforeChild.getZIndex());\n  updatePicture(parentInstance);\n}\nexport function insertInContainerBefore(parentInstance, child, beforeChild) {\n  insertBefore(parentInstance, child, beforeChild);\n}\nexport function removeChild(parentInstance, child) {\n  child.destroy();\n  child.off(EVENTS_NAMESPACE);\n  updatePicture(parentInstance);\n}\nexport function removeChildFromContainer(parentInstance, child) {\n  child.destroy();\n  child.off(EVENTS_NAMESPACE);\n  updatePicture(parentInstance);\n}\nexport function commitTextUpdate(textInstance, oldText, newText) {\n  invariant(false, 'Text components are not yet supported in ReactKonva. You text is: \"' + newText + '\"');\n}\nexport function commitMount(instance, type, newProps) {// Noop\n}\nexport function commitUpdate(instance, updatePayload, type, oldProps, newProps) {\n  applyNodeProps(instance, newProps, oldProps);\n}\nexport function hideInstance(instance) {\n  instance.hide();\n  updatePicture(instance);\n}\nexport function hideTextInstance(textInstance) {// Noop\n}\nexport function unhideInstance(instance, props) {\n  if (props.visible == null || props.visible) {\n    instance.show();\n  }\n}\nexport function unhideTextInstance(textInstance, text) {// Noop\n}\nexport function clearContainer(container) {// Noop\n}","map":{"version":3,"sources":["/home/daniel/reatret.net/react-app/node_modules/react-konva/es/ReactKonvaHostConfig.js"],"names":["Konva","applyNodeProps","updatePicture","EVENTS_NAMESPACE","invariant","unstable_now","now","unstable_IdlePriority","idlePriority","unstable_runWithPriority","run","NO_CONTEXT","UPDATE_SIGNAL","Node","prototype","_applyProps","appendInitialChild","parentInstance","child","add","createInstance","type","props","internalInstanceHandle","NodeClass","instance","propsWithoutEvents","propsWithOnlyEvents","key","isEvent","slice","createTextInstance","text","rootContainerInstance","finalizeInitialChildren","domElement","getPublicInstance","prepareForCommit","preparePortalMount","prepareUpdate","oldProps","newProps","resetAfterCommit","resetTextContent","shouldDeprioritizeSubtree","getRootHostContext","getChildHostContext","scheduleTimeout","setTimeout","cancelTimeout","clearTimeout","noTimeout","shouldSetTextContent","isPrimaryRenderer","warnsIfNotActing","supportsMutation","appendChild","parent","moveToTop","appendChildToContainer","insertBefore","beforeChild","_remove","setZIndex","getZIndex","insertInContainerBefore","removeChild","destroy","off","removeChildFromContainer","commitTextUpdate","textInstance","oldText","newText","commitMount","commitUpdate","updatePayload","hideInstance","hide","hideTextInstance","unhideInstance","visible","show","unhideTextInstance","clearContainer","container"],"mappings":"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","sourcesContent":["import Konva from 'konva/lib/Core';\nimport { applyNodeProps, updatePicture, EVENTS_NAMESPACE } from './makeUpdates';\n\nimport invariant from './invariant';\n\nexport { unstable_now as now, unstable_IdlePriority as idlePriority, unstable_runWithPriority as run } from 'scheduler';\n\nvar NO_CONTEXT = {};\nvar UPDATE_SIGNAL = {};\n\n// for react-spring capability\nKonva.Node.prototype._applyProps = applyNodeProps;\n\nexport function appendInitialChild(parentInstance, child) {\n  if (typeof child === 'string') {\n    // Noop for string children of Text (eg <Text>foo</Text>)\n    invariant(false, 'Do not use plain text as child of Konva.Node. You are using text: \"%s\"', child);\n    return;\n  }\n\n  parentInstance.add(child);\n\n  updatePicture(parentInstance);\n}\n\nexport function createInstance(type, props, internalInstanceHandle) {\n  var NodeClass = Konva[type];\n  if (!NodeClass) {\n    invariant(instance, 'Konva has no node with the type \"%s\". If you use minimal version of react-konva, just import required nodes into Konva: `import \"konva/lib/shapes/%s\"`  If you want to render DOM elements as part of canvas tree take a look into this demo: https://konvajs.github.io/docs/react/DOM_Portal.html', type, type);\n    return;\n  }\n\n  // we need to split props into events and non events\n  // we we can pass non events into constructor directly\n  // that way the performance should be better\n  // we we apply change \"applyNodeProps\"\n  // then it will trigger change events on first run\n  // but we don't need them!\n  var propsWithoutEvents = {};\n  var propsWithOnlyEvents = {};\n\n  for (var key in props) {\n    var isEvent = key.slice(0, 2) === 'on';\n    if (isEvent) {\n      propsWithOnlyEvents[key] = props[key];\n    } else {\n      propsWithoutEvents[key] = props[key];\n    }\n  }\n\n  var instance = new NodeClass(propsWithoutEvents);\n\n  applyNodeProps(instance, propsWithOnlyEvents);\n\n  return instance;\n}\n\nexport function createTextInstance(text, rootContainerInstance, internalInstanceHandle) {\n  invariant(false, 'Text components are not supported for now in ReactKonva. Your text is: \"' + text + '\"');\n}\n\nexport function finalizeInitialChildren(domElement, type, props) {\n  return false;\n}\n\nexport function getPublicInstance(instance) {\n  return instance;\n}\n\nexport function prepareForCommit() {\n  return null;\n}\n\nexport function preparePortalMount() {\n  return null;\n}\n\nexport function prepareUpdate(domElement, type, oldProps, newProps) {\n  return UPDATE_SIGNAL;\n}\n\nexport function resetAfterCommit() {\n  // Noop\n}\n\nexport function resetTextContent(domElement) {\n  // Noop\n}\n\nexport function shouldDeprioritizeSubtree(type, props) {\n  return false;\n}\n\nexport function getRootHostContext() {\n  return NO_CONTEXT;\n}\n\nexport function getChildHostContext() {\n  return NO_CONTEXT;\n}\n\nexport var scheduleTimeout = setTimeout;\nexport var cancelTimeout = clearTimeout;\nexport var noTimeout = -1;\n// export const schedulePassiveEffects = scheduleDeferredCallback;\n// export const cancelPassiveEffects = cancelDeferredCallback;\n\nexport function shouldSetTextContent(type, props) {\n  return false;\n}\n\n// The Konva renderer is secondary to the React DOM renderer.\nexport var isPrimaryRenderer = false;\nexport var warnsIfNotActing = true;\nexport var supportsMutation = true;\n\nexport function appendChild(parentInstance, child) {\n  if (child.parent === parentInstance) {\n    child.moveToTop();\n  } else {\n    parentInstance.add(child);\n  }\n\n  updatePicture(parentInstance);\n}\n\nexport function appendChildToContainer(parentInstance, child) {\n  if (child.parent === parentInstance) {\n    child.moveToTop();\n  } else {\n    parentInstance.add(child);\n  }\n  updatePicture(parentInstance);\n}\n\nexport function insertBefore(parentInstance, child, beforeChild) {\n  invariant(child !== beforeChild, 'ReactKonva: Can not insert node before itself');\n  // child._remove() will not stop dragging\n  // but child.remove() will stop it, but we don't need it\n  // removing will reset zIndexes\n  child._remove();\n  parentInstance.add(child);\n  child.setZIndex(beforeChild.getZIndex());\n  updatePicture(parentInstance);\n}\n\nexport function insertInContainerBefore(parentInstance, child, beforeChild) {\n  insertBefore(parentInstance, child, beforeChild);\n}\n\nexport function removeChild(parentInstance, child) {\n  child.destroy();\n  child.off(EVENTS_NAMESPACE);\n  updatePicture(parentInstance);\n}\n\nexport function removeChildFromContainer(parentInstance, child) {\n  child.destroy();\n  child.off(EVENTS_NAMESPACE);\n  updatePicture(parentInstance);\n}\n\nexport function commitTextUpdate(textInstance, oldText, newText) {\n  invariant(false, 'Text components are not yet supported in ReactKonva. You text is: \"' + newText + '\"');\n}\n\nexport function commitMount(instance, type, newProps) {\n  // Noop\n}\n\nexport function commitUpdate(instance, updatePayload, type, oldProps, newProps) {\n  applyNodeProps(instance, newProps, oldProps);\n}\n\nexport function hideInstance(instance) {\n  instance.hide();\n  updatePicture(instance);\n}\n\nexport function hideTextInstance(textInstance) {\n  // Noop\n}\n\nexport function unhideInstance(instance, props) {\n  if (props.visible == null || props.visible) {\n    instance.show();\n  }\n}\n\nexport function unhideTextInstance(textInstance, text) {\n  // Noop\n}\n\nexport function clearContainer(container) {\n  // Noop\n}"]},"metadata":{},"sourceType":"module"}