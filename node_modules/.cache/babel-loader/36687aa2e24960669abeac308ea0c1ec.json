{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _eventemitter = require('eventemitter3');\n\nvar _eventemitter2 = _interopRequireDefault(_eventemitter);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Job = function (_EventEmitter) {\n  _inherits(Job, _EventEmitter);\n\n  function Job(pool) {\n    _classCallCheck(this, Job);\n\n    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));\n\n    _this.pool = pool;\n    _this.thread = null;\n    _this.runArgs = [];\n    _this.sendArgs = [];\n    pool.emit('newJob', _this);\n    return _this;\n  }\n\n  Job.prototype.run = function run() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (args.length === 0) {\n      throw new Error('Cannot call .run() without arguments.');\n    }\n\n    this.runArgs = args;\n    return this;\n  };\n\n  Job.prototype.send = function send() {\n    if (this.runArgs.length === 0) {\n      throw new Error('Cannot .send() before .run().');\n    }\n\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    this.sendArgs = args;\n    this.emit('readyToRun');\n    return this;\n  };\n\n  Job.prototype.executeOn = function executeOn(thread) {\n    var _this2 = this,\n        _thread$on$once$once$,\n        _thread$on$once$once;\n\n    var onProgress = function onProgress() {\n      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      return _this2.emit.apply(_this2, ['progress'].concat(args));\n    };\n\n    var onMessage = function onMessage() {\n      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      _this2.emit.apply(_this2, ['done'].concat(args));\n\n      thread.removeListener('progress', onProgress);\n    };\n\n    var onError = function onError() {\n      for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      _this2.emit.apply(_this2, ['error'].concat(args));\n\n      thread.removeListener('progress', onProgress);\n    };\n\n    (_thread$on$once$once$ = (_thread$on$once$once = thread.on('progress', onProgress).once('message', onMessage).once('error', onError)).run.apply(_thread$on$once$once, this.runArgs)).send.apply(_thread$on$once$once$, this.sendArgs);\n\n    this.thread = thread;\n    this.emit('threadChanged');\n    return this;\n  };\n\n  Job.prototype.promise = function promise() {\n    var _this3 = this; // Always return a promise\n\n\n    return new Promise(function (resolve) {\n      // If the thread isn't set, listen for the threadChanged event\n      if (!_this3.thread) {\n        _this3.once('threadChanged', function () {\n          resolve(_this3.thread.promise());\n        });\n      } else {\n        resolve(_this3.thread.promise());\n      }\n    });\n  };\n\n  Job.prototype.abort = function abort() {\n    this.emit('abort');\n  };\n\n  Job.prototype.destroy = function destroy() {\n    this.removeAllListeners();\n    delete this.runArgs;\n    delete this.sendArgs;\n  };\n\n  return Job;\n}(_eventemitter2.default);\n\nexports.default = Job;","map":{"version":3,"sources":["job.js"],"names":["Job","pool","run","args","send","executeOn","thread","onProgress","onMessage","onError","promise","resolve","abort","destroy"],"mappings":"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","sourcesContent":["\nimport EventEmitter from 'eventemitter3';\n\nexport default class Job extends EventEmitter {\n  constructor(pool) {\n    super();\n    this.pool   = pool;\n    this.thread = null;\n\n    this.runArgs = [];\n    this.sendArgs = [];\n\n    pool.emit('newJob', this);\n  }\n\n  run(...args) {\n    if (args.length === 0) {\n      throw new Error('Cannot call .run() without arguments.');\n    }\n\n    this.runArgs = args;\n    return this;\n  }\n\n  send(...args) {\n    if (this.runArgs.length === 0) {\n      throw new Error('Cannot .send() before .run().');\n    }\n\n    this.sendArgs = args;\n\n    this.emit('readyToRun');\n    return this;\n  }\n\n  executeOn(thread) {\n    const onProgress = (...args) => this.emit('progress', ...args);\n    const onMessage = (...args) => {\n      this.emit('done', ...args);\n      thread.removeListener('progress', onProgress);\n    };\n    const onError = (...args) => {\n      this.emit('error', ...args);\n      thread.removeListener('progress', onProgress);\n    };\n\n    thread\n      .on('progress', onProgress)\n      .once('message', onMessage)\n      .once('error', onError)\n      .run(...this.runArgs)\n      .send(...this.sendArgs);\n\n    this.thread = thread;\n    this.emit('threadChanged');\n    return this;\n  }\n\n  promise() {\n    // Always return a promise\n    return new Promise((resolve) => {\n      // If the thread isn't set, listen for the threadChanged event\n      if (!this.thread) {\n        this.once('threadChanged', () => {\n          resolve(this.thread.promise());\n        });\n      } else {\n        resolve(this.thread.promise());\n      }\n    });\n  }\n\n  abort() {\n    this.emit('abort');\n  }\n\n  destroy () {\n    this.removeAllListeners();\n    delete this.runArgs;\n    delete this.sendArgs;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}