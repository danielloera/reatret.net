{"ast":null,"code":"import _slicedToArray from \"/home/daniel/reatret.net/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/daniel/reatret.net/react-app/src/components/Home/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Container from '@material-ui/core/Container';\nimport kiwi from '../../images/kiwi.png';\nimport trex from '../../images/komodo.png';\nimport komodo from '../../images/trex.png';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport RWIcon from '@material-ui/icons/FastRewind';\nimport FFIcon from '@material-ui/icons/FastForward';\nimport CodeIcon from '@material-ui/icons/Code';\nimport ResumeIcon from '@material-ui/icons/Description';\nimport ContactIcon from '@material-ui/icons/Email';\nimport Typography from '@material-ui/core/Typography';\nimport { createLinks } from '../../utils';\nimport './Home.css';\n\nconst styles = theme => ({\n  root: {\n    marginTop: theme.spacing(16),\n    textAlign: \"center\"\n  },\n  spinningImage: {\n    animation: \"logo-spin infinite 3s linear\",\n    height: \"25vh\",\n    maxWidth: \"90vw\",\n    display: \"flex\",\n    marginBottom: theme.spacing(12)\n  },\n  card: {\n    padding: theme.spacing(1)\n  },\n  centerHolder: {\n    justifyContent: \"center\",\n    display: \"flex\"\n  }\n});\n\nconst LINKS = [{\n  name: \"Github\",\n  link: \"https://github.com/danielloera\",\n  icon: /*#__PURE__*/_jsxDEV(CodeIcon, {\n    fontSize: \"large\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 12\n  }, this)\n}, {\n  name: \"Resume\",\n  link: \"https://docs.google.com/document/d/18sWdFkdfeEGWD7KpvNJ7I25CUm_n0n1hrINJsOv3VzA\",\n  icon: /*#__PURE__*/_jsxDEV(ResumeIcon, {\n    fontSize: \"large\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 12\n  }, this)\n}, {\n  name: \"Contact\",\n  link: \"mailto:danny.reatret@gmail.com\",\n  icon: /*#__PURE__*/_jsxDEV(ContactIcon, {\n    fontSize: \"large\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 12\n  }, this)\n}];\nconst imgs = [kiwi, trex, komodo];\nconst FASTER = 0;\nconst SLOWER = 1;\nconst Links = createLinks(LINKS);\n_c = Links;\n\nfunction spinImgAt(secs) {\n  return {\n    animation: \"logo-spin infinite \".concat(secs, \"s linear\")\n  };\n}\n\nfunction createSnackBar(v, h, message, open, handleClose) {\n  return /*#__PURE__*/_jsxDEV(Snackbar, {\n    anchorOrigin: {\n      vertical: v,\n      horizontal: h\n    },\n    open: open,\n    autoHideDuration: 3000,\n    onClose: handleClose,\n    ContentProps: {\n      'aria-describedby': 'message-id'\n    },\n    message: /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"message-id\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 16\n    }, this)\n  }, h, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\nfunction createControl(name, fn) {\n  return [/*#__PURE__*/_jsxDEV(IconButton, {\n    \"aria-label\": \"\".concat(name, \" Slower\"),\n    onClick: fn(SLOWER),\n    children: /*#__PURE__*/_jsxDEV(RWIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, \"\".concat(name, \"1\"), false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n    children: name\n  }, \"\".concat(name, \"2\"), false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n    \"aria-label\": \"\".concat(name, \" Faster\"),\n    onClick: fn(FASTER),\n    children: /*#__PURE__*/_jsxDEV(FFIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, \"\".concat(name, \"3\"), false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this)];\n}\n\nconst defaultSpin = 3;\nconst defaultSwap = 3000;\n\nfunction Home(props) {\n  _s();\n\n  const classes = props.classes;\n\n  const _useState = useState(Math.trunc(Math.random() * imgs.length)),\n        _useState2 = _slicedToArray(_useState, 2),\n        imgIdx = _useState2[0],\n        setImgIdx = _useState2[1];\n\n  const _useState3 = useState(defaultSpin),\n        _useState4 = _slicedToArray(_useState3, 2),\n        spinSpeed = _useState4[0],\n        setSpinSpeed = _useState4[1];\n\n  const _useState5 = useState(defaultSwap),\n        _useState6 = _slicedToArray(_useState5, 2),\n        swapSpeed = _useState6[0],\n        setSwapSpeed = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        spinSnack = _useState8[0],\n        setSpinSnack = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        swapSnack = _useState10[0],\n        setSwapSnack = _useState10[1];\n\n  const _useState11 = useState(''),\n        _useState12 = _slicedToArray(_useState11, 2),\n        spinMsg = _useState12[0],\n        setSpinMsg = _useState12[1];\n\n  const _useState13 = useState(''),\n        _useState14 = _slicedToArray(_useState13, 2),\n        swapMsg = _useState14[0],\n        setSwapMsg = _useState14[1];\n\n  function reset() {\n    setSpinSpeed(defaultSpin);\n    setSwapSpeed(defaultSwap);\n    setSpinMsg(\"Spinning and swapping every \".concat(defaultSpin, \"s\"));\n    setSpinSnack(true);\n  }\n\n  const spin = useCallback(type => {\n    return () => {\n      let newSpeed = null;\n\n      if (type === FASTER) {\n        newSpeed = spinSpeed / 2;\n      } else {\n        newSpeed = spinSpeed * 2;\n      }\n\n      setSpinSpeed(newSpeed);\n      setSpinMsg(\"Spinning every \".concat(newSpeed, \"s\"));\n      setSpinSnack(true);\n    };\n  });\n\n  function swap(type) {\n    return () => {\n      let newSpeed = null;\n\n      if (type === FASTER) {\n        newSpeed = swapSpeed / 2;\n      } else {\n        newSpeed = swapSpeed * 2;\n      }\n\n      setSwapSpeed(newSpeed);\n      setSwapMsg(\"Swapping every \".concat(newSpeed / 1000, \"s\"));\n      setSwapSnack(true);\n    };\n  } // Update swap interval on imageChange/speedChange\n\n\n  useEffect(() => {\n    function imgTick() {\n      let newIdx = imgIdx + 1;\n\n      if (newIdx === imgs.length) {\n        newIdx = 0;\n      }\n\n      setImgIdx(newIdx);\n    }\n\n    const id = setInterval(imgTick, swapSpeed);\n    return () => clearInterval(id);\n  }, [swapSpeed, imgIdx]);\n  const logo = imgs[imgIdx];\n  const spinStyle = useMemo(() => spinImgAt(spinSpeed), [spinSpeed]);\n  const spinSnackBar = useMemo(() => createSnackBar('bottom', 'left', spinMsg, spinSnack, (e, r) => {\n    if (r === 'timeout') setSpinSnack(false);\n  }), [spinMsg, spinSnack]);\n  const swapSnackBar = useMemo(() => createSnackBar('bottom', 'right', swapMsg, swapSnack, (e, r) => {\n    if (r === 'timeout') setSwapSnack(false);\n  }), [swapMsg, swapSnack]);\n  const spinControl = useMemo(() => createControl(\"Spin\", spin), [spinSpeed]);\n  const swapControl = useMemo(() => createControl(\"Swap\", swap), [swapSpeed]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: classes.root,\n    children: [[spinSnackBar, swapSnackBar], /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      justify: \"center\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        className: classes.centerHolder,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          className: classes.spinningImage,\n          alt: \"logo\",\n          style: spinStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 10,\n        md: 6,\n        className: classes.cardHolder,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          className: classes.card,\n          elevation: 5,\n          children: [/*#__PURE__*/_jsxDEV(CardContent, {\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              component: \"p\",\n              variant: \"body1\",\n              children: [\"Hi, I'm Daniel. I love making things.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 17\n              }, this), \"You can see some of them on this site or linked below.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 17\n              }, this), \"Have fun \", /*#__PURE__*/_jsxDEV(\"i\", {\n                children: \"spinning\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 26\n              }, this), \".\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n            style: {\n              justifyContent: 'center'\n            },\n            children: [spinControl, /*#__PURE__*/_jsxDEV(Button, {\n              size: \"small\",\n              variant: \"contained\",\n              color: \"secondary\",\n              onClick: reset,\n              children: \"Reset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 16\n            }, this), swapControl]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: Links\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"mPTVkGVMf37d3cDbfh1ATBjn6dQ=\");\n\n_c2 = Home;\nHome.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(Home);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Links\");\n$RefreshReg$(_c2, \"Home\");","map":{"version":3,"sources":["/home/daniel/reatret.net/react-app/src/components/Home/Home.js"],"names":["React","useState","useEffect","useMemo","useCallback","withStyles","PropTypes","Container","kiwi","trex","komodo","Snackbar","Card","CardActions","CardContent","Grid","IconButton","Button","RWIcon","FFIcon","CodeIcon","ResumeIcon","ContactIcon","Typography","createLinks","styles","theme","root","marginTop","spacing","textAlign","spinningImage","animation","height","maxWidth","display","marginBottom","card","padding","centerHolder","justifyContent","LINKS","name","link","icon","imgs","FASTER","SLOWER","Links","spinImgAt","secs","createSnackBar","v","h","message","open","handleClose","vertical","horizontal","createControl","fn","defaultSpin","defaultSwap","Home","props","classes","Math","trunc","random","length","imgIdx","setImgIdx","spinSpeed","setSpinSpeed","swapSpeed","setSwapSpeed","spinSnack","setSpinSnack","swapSnack","setSwapSnack","spinMsg","setSpinMsg","swapMsg","setSwapMsg","reset","spin","type","newSpeed","swap","imgTick","newIdx","id","setInterval","clearInterval","logo","spinStyle","spinSnackBar","e","r","swapSnackBar","spinControl","swapControl","cardHolder","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from 'react'\nimport { withStyles } from '@material-ui/core/styles'\nimport PropTypes from 'prop-types'\nimport Container from '@material-ui/core/Container'\nimport kiwi from '../../images/kiwi.png'\nimport trex from '../../images/komodo.png'\nimport komodo from '../../images/trex.png'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport Grid from '@material-ui/core/Grid'\nimport IconButton from '@material-ui/core/IconButton'\nimport Button from '@material-ui/core/Button'\nimport RWIcon from '@material-ui/icons/FastRewind'\nimport FFIcon from '@material-ui/icons/FastForward'\nimport CodeIcon from '@material-ui/icons/Code'\nimport ResumeIcon from '@material-ui/icons/Description'\nimport ContactIcon from '@material-ui/icons/Email'\nimport Typography from '@material-ui/core/Typography'\nimport { createLinks } from '../../utils'\nimport './Home.css'\n\nconst styles = (theme) => ({\n  root: {\n    marginTop: theme.spacing(16),\n    textAlign: \"center\"\n  },\n  spinningImage: {\n    animation: \"logo-spin infinite 3s linear\",\n    height: \"25vh\",\n    maxWidth: \"90vw\",\n    display: \"flex\",\n    marginBottom: theme.spacing(12),\n  },\n  card: {\n    padding: theme.spacing(1),\n  },\n  centerHolder: {\n    justifyContent: \"center\",\n    display: \"flex\"\n  },\n})\n\nconst LINKS = [\n  {\n    name: \"Github\",\n    link: \"https://github.com/danielloera\",\n    icon: (<CodeIcon fontSize=\"large\"/>)\n  },\n  {\n    name: \"Resume\",\n    link: \"https://docs.google.com/document/d/18sWdFkdfeEGWD7KpvNJ7I25CUm_n0n1hrINJsOv3VzA\",\n    icon: (<ResumeIcon fontSize=\"large\"/>)\n  },\n  {\n    name: \"Contact\",\n    link: \"mailto:danny.reatret@gmail.com\",\n    icon: (<ContactIcon fontSize=\"large\"/>)\n  },\n]\n\nconst imgs = [kiwi, trex, komodo]\n\nconst FASTER = 0\nconst SLOWER = 1\nconst Links = createLinks(LINKS)\n\nfunction spinImgAt(secs) {\n  return {\n    animation: `logo-spin infinite ${secs}s linear`\n  }\n}\n\nfunction createSnackBar(v, h, message, open, handleClose) {\n  return (\n    <Snackbar key={h}\n      anchorOrigin={{vertical: v, horizontal: h}}\n      open={open}\n      autoHideDuration={3000}\n      onClose={handleClose}\n      ContentProps={{'aria-describedby': 'message-id'}}\n      message={<span id=\"message-id\">{message}</span>}/>\n  )\n}\n\nfunction createControl(name, fn) {\n  return [\n    <IconButton key={`${name}1`}\n      aria-label={`${name} Slower`}\n      onClick={fn(SLOWER)}>\n      <RWIcon/>\n    </IconButton>,\n    <Typography key={`${name}2`}>{name}</Typography>,\n    <IconButton key={`${name}3`}\n      aria-label={`${name} Faster`}\n      onClick={fn(FASTER)}>\n      <FFIcon/>\n    </IconButton>\n  ]\n}\n\nconst defaultSpin = 3\nconst defaultSwap = 3000\n\nfunction Home(props) {\n  const { classes } = props\n  const [imgIdx, setImgIdx] = useState(Math.trunc(Math.random() * imgs.length))\n  const [spinSpeed, setSpinSpeed] = useState(defaultSpin)\n  const [swapSpeed, setSwapSpeed] = useState(defaultSwap)\n  const [spinSnack, setSpinSnack] = useState(false)\n  const [swapSnack, setSwapSnack] = useState(false)\n  const [spinMsg, setSpinMsg] = useState('')\n  const [swapMsg, setSwapMsg] = useState('')\n\n  function reset() {\n    setSpinSpeed(defaultSpin)\n    setSwapSpeed(defaultSwap)\n    setSpinMsg(`Spinning and swapping every ${defaultSpin}s`)\n    setSpinSnack(true)\n  }\n\n  const spin = useCallback((type) => {\n    return () => {\n      let newSpeed = null\n      if (type === FASTER) {\n        newSpeed = spinSpeed / 2\n      } else {\n        newSpeed = spinSpeed * 2\n      }\n      setSpinSpeed(newSpeed)\n      setSpinMsg(`Spinning every ${newSpeed}s`)\n      setSpinSnack(true)\n    }\n  });\n\n  function swap(type) {\n    return () => {\n      let newSpeed = null\n      if (type === FASTER) {\n        newSpeed = swapSpeed / 2\n      } else {\n        newSpeed = swapSpeed * 2\n      }\n      setSwapSpeed(newSpeed)\n      setSwapMsg(`Swapping every ${newSpeed / 1000}s`)\n      setSwapSnack(true)\n    }\n  }\n\n  // Update swap interval on imageChange/speedChange\n  useEffect(() => {\n    function imgTick() {\n      let newIdx = imgIdx + 1\n      if (newIdx === imgs.length) {\n        newIdx = 0\n      }\n      setImgIdx(newIdx)\n    }\n    const id = setInterval(imgTick, swapSpeed)\n    return () => clearInterval(id)\n  }, [swapSpeed, imgIdx])\n\n  const logo = imgs[imgIdx]\n  const spinStyle = useMemo(() => spinImgAt(spinSpeed), [spinSpeed])\n  const spinSnackBar = useMemo(() => (\n    createSnackBar('bottom', 'left', spinMsg, spinSnack,\n                   (e, r) => {if(r === 'timeout') setSpinSnack(false)})),\n    [spinMsg, spinSnack])\n  const swapSnackBar = useMemo(() => (\n    createSnackBar('bottom', 'right', swapMsg, swapSnack,\n                   (e, r) => {if(r === 'timeout') setSwapSnack(false)})),\n    [swapMsg, swapSnack])\n  const spinControl = useMemo(() => createControl(\"Spin\", spin), [spinSpeed])\n  const swapControl = useMemo(() => createControl(\"Swap\", swap), [swapSpeed])\n  return (\n    <Container className={classes.root}>\n      {/* Snackbars */}\n      {[spinSnackBar, swapSnackBar]}\n      <Grid container spacing={2} justify=\"center\" alignItems=\"center\">\n        <Grid item xs={12} className={classes.centerHolder}>\n        {/* Spinning Image */}\n        <img src={logo} className={classes.spinningImage} alt=\"logo\" style={spinStyle}/>\n        </Grid>\n        <Grid item xs={12} sm={10} md={6} className={classes.cardHolder}>\n          {/* Control Card */}\n          <Card className={classes.card} elevation={5}>\n            <CardContent>\n              <Typography component=\"p\" variant=\"body1\">\n                Hi, I'm Daniel. I love making things.\n                <br/>\n                You can see some of them on this site or linked below.\n                <br/>\n                Have fun <i>spinning</i>.\n              </Typography>\n            </CardContent>\n            <CardActions style={{justifyContent: 'center'}}>\n               {spinControl}\n               <Button size=\"small\" variant=\"contained\" color=\"secondary\"\n                       onClick={reset}>Reset</Button>\n               {swapControl}\n            </CardActions>\n          </Card>\n        </Grid>\n        <Grid item xs={12}>{Links}</Grid>\n      </Grid>\n    </Container>\n  )\n}\n\nHome.propTypes = {\n  classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(Home)\n"]},"metadata":{},"sourceType":"module"}