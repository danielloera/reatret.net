[{"/home/daniel/reatret.net/react-app/src/index.js":"1","/home/daniel/reatret.net/react-app/src/serviceWorker.js":"2","/home/daniel/reatret.net/react-app/src/components/App/App.js":"3","/home/daniel/reatret.net/react-app/src/components/App/NavBar.js":"4","/home/daniel/reatret.net/react-app/src/components/App/404.js":"5","/home/daniel/reatret.net/react-app/src/components/Home/Home.js":"6","/home/daniel/reatret.net/react-app/src/components/UTTower/UTTower.js":"7","/home/daniel/reatret.net/react-app/src/components/CodeSwitching/CodeSwitching.js":"8","/home/daniel/reatret.net/react-app/src/components/PrimeUlam/PrimeUlam.js":"9","/home/daniel/reatret.net/react-app/src/components/App/TempDrawer.js":"10","/home/daniel/reatret.net/react-app/src/utils.js":"11","/home/daniel/reatret.net/react-app/src/components/CodeSwitching/LabeledWord.js":"12"},{"size":558,"mtime":1610911816790,"results":"13","hashOfConfig":"14"},{"size":4951,"mtime":1610911816790,"results":"15","hashOfConfig":"14"},{"size":1479,"mtime":1610911816778,"results":"16","hashOfConfig":"14"},{"size":1834,"mtime":1610911816778,"results":"17","hashOfConfig":"14"},{"size":319,"mtime":1610911816778,"results":"18","hashOfConfig":"14"},{"size":6382,"mtime":1610911816778,"results":"19","hashOfConfig":"14"},{"size":2500,"mtime":1610911816778,"results":"20","hashOfConfig":"14"},{"size":5275,"mtime":1610911816778,"results":"21","hashOfConfig":"14"},{"size":13799,"mtime":1610911816778,"results":"22","hashOfConfig":"14"},{"size":2097,"mtime":1610911816778,"results":"23","hashOfConfig":"14"},{"size":674,"mtime":1610911816790,"results":"24","hashOfConfig":"14"},{"size":1526,"mtime":1610911816778,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1q7azyj",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/daniel/reatret.net/react-app/src/index.js",[],["53","54"],"/home/daniel/reatret.net/react-app/src/serviceWorker.js",[],"/home/daniel/reatret.net/react-app/src/components/App/App.js",[],"/home/daniel/reatret.net/react-app/src/components/App/NavBar.js",[],"/home/daniel/reatret.net/react-app/src/components/App/404.js",[],"/home/daniel/reatret.net/react-app/src/components/Home/Home.js",["55","56","57"],"import React, { useState, useEffect, useMemo } from 'react'\nimport { withStyles } from '@material-ui/core/styles'\nimport PropTypes from 'prop-types'\nimport Container from '@material-ui/core/Container'\nimport kiwi from '../../images/kiwi.png'\nimport trex from '../../images/komodo.png'\nimport komodo from '../../images/trex.png'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport Grid from '@material-ui/core/Grid'\nimport IconButton from '@material-ui/core/IconButton'\nimport Button from '@material-ui/core/Button'\nimport RWIcon from '@material-ui/icons/FastRewind'\nimport FFIcon from '@material-ui/icons/FastForward'\nimport CodeIcon from '@material-ui/icons/Code'\nimport ResumeIcon from '@material-ui/icons/Description'\nimport ContactIcon from '@material-ui/icons/Email'\nimport Typography from '@material-ui/core/Typography'\nimport { createLinks } from '../../utils'\nimport './Home.css'\n\nconst styles = (theme) => ({\n  root: {\n    marginTop: theme.spacing(16),\n    textAlign: \"center\"\n  },\n  spinningImage: {\n    animation: \"logo-spin infinite 3s linear\",\n    height: \"25vh\",\n    maxWidth: \"90vw\",\n    display: \"flex\",\n    marginBottom: theme.spacing(12),\n  },\n  card: {\n    padding: theme.spacing(1),\n  },\n  centerHolder: {\n    justifyContent: \"center\",\n    display: \"flex\"\n  },\n})\n\nconst LINKS = [\n  {\n    name: \"Github\",\n    link: \"https://github.com/danielloera\",\n    icon: (<CodeIcon fontSize=\"large\"/>)\n  },\n  {\n    name: \"Resume\",\n    link: \"https://docs.google.com/document/d/18sWdFkdfeEGWD7KpvNJ7I25CUm_n0n1hrINJsOv3VzA\",\n    icon: (<ResumeIcon fontSize=\"large\"/>)\n  },\n  {\n    name: \"Contact\",\n    link: \"mailto:danny.reatret@gmail.com\",\n    icon: (<ContactIcon fontSize=\"large\"/>)\n  },\n]\n\nconst imgs = [kiwi, trex, komodo]\n\nconst FASTER = 0\nconst SLOWER = 1\nconst Links = createLinks(LINKS)\n\nfunction spinImgAt(secs) {\n  return {\n    animation: `logo-spin infinite ${secs}s linear`\n  }\n}\n\nfunction createSnackBar(v, h, message, open, handleClose) {\n  return (\n    <Snackbar key={h}\n      anchorOrigin={{vertical: v, horizontal: h}}\n      open={open}\n      autoHideDuration={3000}\n      onClose={handleClose}\n      ContentProps={{'aria-describedby': 'message-id'}}\n      message={<span id=\"message-id\">{message}</span>}/>\n  )\n}\n\nfunction createControl(name, fn) {\n  return [\n    <IconButton key={`${name}1`}\n      aria-label={`${name} Slower`}\n      onClick={fn(SLOWER)}>\n      <RWIcon/>\n    </IconButton>,\n    <Typography key={`${name}2`}>{name}</Typography>,\n    <IconButton key={`${name}3`}\n      aria-label={`${name} Faster`}\n      onClick={fn(FASTER)}>\n      <FFIcon/>\n    </IconButton>\n  ]\n}\n\nconst defaultSpin = 3\nconst defaultSwap = 3000\n\nfunction Home(props) {\n  const { classes } = props\n  const [imgIdx, setImgIdx] = useState(Math.trunc(Math.random() * imgs.length))\n  const [spinSpeed, setSpinSpeed] = useState(defaultSpin)\n  const [swapSpeed, setSwapSpeed] = useState(defaultSwap)\n  const [spinSnack, setSpinSnack] = useState(false)\n  const [swapSnack, setSwapSnack] = useState(false)\n  const [spinMsg, setSpinMsg] = useState('')\n  const [swapMsg, setSwapMsg] = useState('')\n\n  function imgTick() {\n    let newIdx = imgIdx + 1\n    if (newIdx === imgs.length) {\n      newIdx = 0\n    }\n    setImgIdx(newIdx)\n  }\n\n  function reset() {\n    setSpinSpeed(defaultSpin)\n    setSwapSpeed(defaultSwap)\n    setSpinMsg(`Spinning and swapping every ${defaultSpin}s`)\n    setSpinSnack(true)\n  }\n\n  function spin(type) {\n    return () => {\n      let newSpeed = null\n      if (type === FASTER) {\n        newSpeed = spinSpeed / 2\n      } else {\n        newSpeed = spinSpeed * 2\n      }\n      setSpinSpeed(newSpeed)\n      setSpinMsg(`Spinning every ${newSpeed}s`)\n      setSpinSnack(true)\n    }\n  }\n\n  function swap(type) {\n    return () => {\n      let newSpeed = null\n      if (type === FASTER) {\n        newSpeed = swapSpeed / 2\n      } else {\n        newSpeed = swapSpeed * 2\n      }\n      setSwapSpeed(newSpeed)\n      setSwapMsg(`Swapping every ${newSpeed / 1000}s`)\n      setSwapSnack(true)\n    }\n  }\n\n  // Update swap interval on imageChange/speedChange\n  useEffect(() => {\n    const id = setInterval(imgTick, swapSpeed)\n    return () => clearInterval(id)\n  }, [swapSpeed, imgIdx])\n\n  const logo = imgs[imgIdx]\n  const spinStyle = useMemo(() => spinImgAt(spinSpeed), [spinSpeed])\n  const spinSnackBar = useMemo(() => (\n    createSnackBar('bottom', 'left', spinMsg, spinSnack,\n                   (e, r) => {if(r === 'timeout') setSpinSnack(false)})),\n    [spinMsg, spinSnack])\n  const swapSnackBar = useMemo(() => (\n    createSnackBar('bottom', 'right', swapMsg, swapSnack,\n                   (e, r) => {if(r === 'timeout') setSwapSnack(false)})),\n    [swapMsg, swapSnack])\n  const spinControl = useMemo(() => createControl(\"Spin\", spin), [spinSpeed])\n  const swapControl = useMemo(() => createControl(\"Swap\", swap), [swapSpeed])\n  return (\n    <Container className={classes.root}>\n      {/* Snackbars */}\n      {[spinSnackBar, swapSnackBar]}\n      <Grid container spacing={2} justify=\"center\" alignItems=\"center\">\n        <Grid item xs={12} className={classes.centerHolder}>\n        {/* Spinning Image */}\n        <img src={logo} className={classes.spinningImage} alt=\"logo\" style={spinStyle}/>\n        </Grid>\n        <Grid item xs={12} sm={10} md={6} className={classes.cardHolder}>\n          {/* Control Card */}\n          <Card className={classes.card} elevation={5}>\n            <CardContent>\n              <Typography component=\"p\" variant=\"body1\">\n                Hi, I'm Daniel. I love making things.\n                <br/>\n                You can see some of them on this site or linked below.\n                <br/>\n                Have fun <i>spinning</i>.\n              </Typography>\n            </CardContent>\n            <CardActions style={{justifyContent: 'center'}}>\n               {spinControl}\n               <Button size=\"small\" variant=\"contained\" color=\"secondary\"\n                       onClick={reset}>Reset</Button>\n               {swapControl}\n            </CardActions>\n          </Card>\n        </Grid>\n        <Grid item xs={12}>{Links}</Grid>\n      </Grid>\n    </Container>\n  )\n}\n\nHome.propTypes = {\n  classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(Home)\n","/home/daniel/reatret.net/react-app/src/components/UTTower/UTTower.js",[],"/home/daniel/reatret.net/react-app/src/components/CodeSwitching/CodeSwitching.js",["58","59"],"import React, { useState, useEffect, useMemo } from 'react'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport axios from 'axios'\nimport Container from '@material-ui/core/Container'\nimport Typography from '@material-ui/core/Typography'\nimport Grid from '@material-ui/core/Grid'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport Paper from '@material-ui/core/Paper'\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport LabeledWord from './LabeledWord'\nimport CodeIcon from '@material-ui/icons/Code'\nimport PaperIcon from '@material-ui/icons/Assignment'\nimport { createLinks } from '../../utils'\n\nconst LINKS = [\n  {\n    name: \"Source Code\",\n    link: \"https://gitlab.com/danielloera/nlp-final\",\n    icon: (<CodeIcon fontSize=\"large\"/>)\n  },\n  {\n    name: \"Project PDF\",\n    link: \"https://drive.google.com/file/d/1PzI02kCVVIAnBfy1202F-1mGGD79N8et/view?usp=sharing\",\n    icon: (<PaperIcon fontSize=\"large\"/>)\n  },\n]\nconst Links = createLinks(LINKS)\n\nconst DEFAULT_INPUT = \"Hola! Me llamo Daniel. What is your name?\"\nconst API_URL = \"https://reatret.net/api/codeswitch/\"\n\nconst styles = (theme) => ({\n  root: {\n    marginTop: theme.spacing(4),\n  },\n  labeledWords: {\n    display: \"flex\",\n    alignItems: \"center\",\n    overflowX: \"auto\",\n    overflowY: \"hidden\",\n    border: \"1px solid dimgray\",\n    borderRadius: \"5px\",\n    padding: theme.spacing(2),\n  },\n  buttonHolder: {\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  summary: {\n    textAlign: \"center\",\n    padding: theme.spacing(3)\n  },\n  links: {\n    display: \"flex\",\n    justifyContent: \"center\"\n  },\n})\n\nfunction CodeSwitching(props) {\n  const [inputText, setInputText] = useState(DEFAULT_INPUT)\n  const [labeledData, setLabeledData] = useState(null)\n  const [lastLabeled, setLastLabeled] = useState(null)\n  const [loading, setLoading] = useState(true)\n\n  function labelText() {\n    if (!inputText || lastLabeled === inputText) return\n    setLastLabeled(inputText)\n    setLoading(true)\n    axios.post(API_URL, {text: inputText}).then((response) => {\n      setLabeledData(response.data)\n      setLoading(false)\n    })\n  }\n\n  function getLabeledWords() {\n    if (!labeledData || labeledData.length < 1) return null\n    const labeledWords = []\n    for (let i = 0; i < labeledData.words.length; i++) {\n      labeledWords.push(<LabeledWord key={i}\n                          word={labeledData.words[i]}\n                          label={labeledData.labels[i]}/>)\n    }\n    return labeledWords\n  }\n\n  useEffect(() => labelText(), [])\n\n  const { classes } = props\n  const labeledWords = useMemo(() => {\n    if (loading) return <LinearProgress/>\n    return <div className={classes.labeledWords}>{getLabeledWords()}</div>\n  }, [loading])\n  return (\n    <Container className={classes.root}>\n     <Snackbar\n      anchorOrigin={{vertical: 'bottom', horizontal: 'left',}}\n      open={loading}\n      ContentProps={{'aria-describedby': 'message-id'}}\n      message=\"Generating labels...\"/>\n      <Grid container spacing={4} justify=\"center\" alignItems=\"center\">\n        <Grid item xs={12}>\n          <Typography align=\"center\" variant=\"h5\">Spanish-English Code-Switching Labeler</Typography>\n          <Typography align=\"center\" variant=\"subtitle1\">by{\" \"}\n            <a href=\"https://gitlab.com/jmhern\">\n              Jorge Hernandez\n            </a> & Daniel Loera\n          </Typography>\n        </Grid>\n        <Grid item xs={10} md={11}>\n          <TextField\n            label=\"Input Text\" defaultValue={DEFAULT_INPUT} variant=\"outlined\"\n            margin=\"normal\" fullWidth\n            onChange={(e) => setInputText(e.target.value)}\n            onKeyPress={(ev) => {\n              if (ev.key === 'Enter') {\n                ev.preventDefault()\n                labelText()\n              }\n            }}\n            />\n        </Grid>\n        <Grid item xs={2} md={1} className={classes.buttonHolder}>\n          <Button variant=\"contained\" color=\"secondary\" onClick={labelText}>\n            Label\n          </Button>\n        </Grid>\n        <Grid item xs={12}>\n          {labeledWords}\n        </Grid>\n        <Grid item xs={12} md={10} lg={6}>\n          <Paper className={classes.summary} elevation={2}>\n            <Typography component=\"p\"variant=\"body1\">\n              This research project was developed for{\" \"}\n              <a href=\"https://www.cs.utexas.edu/~gdurrett/\">\n                Greg Durrett's\n              </a> Natural Language Processing class. It uses a bidirectional RNN,\n              trained embeddings, and much more to identify language in english-spanish code-switching\n              text. It certainly isn't perfect, but it does a great job with a vast\n              amount of sentence types. You can look at the source code or read more about the details\n              in the research project linked below. Have fun!\n            </Typography>\n          </Paper>\n        </Grid>\n        <Grid item xs={12} className={classes.links}>\n          {Links}\n        </Grid>\n      </Grid>\n    </Container>\n  )\n}\n\nCodeSwitching.propTypes = {\n  classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(CodeSwitching)\n","/home/daniel/reatret.net/react-app/src/components/PrimeUlam/PrimeUlam.js",[],"/home/daniel/reatret.net/react-app/src/components/App/TempDrawer.js",[],"/home/daniel/reatret.net/react-app/src/utils.js",[],"/home/daniel/reatret.net/react-app/src/components/CodeSwitching/LabeledWord.js",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":163,"column":6,"nodeType":"66","endLine":163,"endColumn":25,"suggestions":"67"},{"ruleId":"64","severity":1,"message":"68","line":175,"column":66,"nodeType":"66","endLine":175,"endColumn":77,"suggestions":"69"},{"ruleId":"64","severity":1,"message":"70","line":176,"column":66,"nodeType":"66","endLine":176,"endColumn":77,"suggestions":"71"},{"ruleId":"64","severity":1,"message":"72","line":89,"column":32,"nodeType":"66","endLine":89,"endColumn":34,"suggestions":"73"},{"ruleId":"64","severity":1,"message":"74","line":95,"column":6,"nodeType":"66","endLine":95,"endColumn":15,"suggestions":"75"},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'imgTick'. Either include it or remove the dependency array.","ArrayExpression",["78"],"React Hook useMemo has a missing dependency: 'spin'. Either include it or remove the dependency array.",["79"],"React Hook useMemo has a missing dependency: 'swap'. Either include it or remove the dependency array.",["80"],"React Hook useEffect has a missing dependency: 'labelText'. Either include it or remove the dependency array.",["81"],"React Hook useMemo has missing dependencies: 'classes.labeledWords' and 'getLabeledWords'. Either include them or remove the dependency array.",["82"],"no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},{"desc":"85","fix":"86"},{"desc":"87","fix":"88"},{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},"Update the dependencies array to be: [swapSpeed, imgIdx, imgTick]",{"range":"93","text":"94"},"Update the dependencies array to be: [spin]",{"range":"95","text":"96"},"Update the dependencies array to be: [swap]",{"range":"97","text":"98"},"Update the dependencies array to be: [labelText]",{"range":"99","text":"100"},"Update the dependencies array to be: [classes.labeledWords, getLabeledWords, loading]",{"range":"101","text":"102"},[4332,4351],"[swapSpeed, imgIdx, imgTick]",[4909,4920],"[spin]",[4987,4998],"[swap]",[2655,2657],"[labelText]",[2849,2858],"[classes.labeledWords, getLabeledWords, loading]"]